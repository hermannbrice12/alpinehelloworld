variables:
  AWS_DEFAULT_REGION: "eu-west-3"
  ECS_CLUSTER: "cluster"  # Nom du cluster ECS
  ECS_TASK_DEFINITION: "tchofo-taskdefinition"  # Définition de la tâche
  ECS_SUBNET_1: "subnet-02487a25300c87d1"  # Subnet 1
  ECS_SUBNET_2: "subnet-0f628c757368e1103"  # Subnet 2
  ECS_SECURITY_GROUP: "sg-0ee00e2e73c60c59a"  # Groupe de sécurité
  IMAGE_NAME: "registry.gitlab.com/tchofo/alpinehelloworld"  # Nom de l'image Docker dans le registre
  INTERNAL_PORT: 5000  # Port interne de l'application dans le conteneur
  EXTERNAL_PORT: 80  # Port externe à exposer

image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - build
  - test_acceptation
  - release_image
  - deploy_staging
  - deploy_prod

docker-build:
  stage: build
  script:
    - docker build -t alpinehelloworld .
    - docker save alpinehelloworld > alpinehelloworld.tar
  artifacts:
    paths:
      - alpinehelloworld.tar

test_acceptation:
  stage: test_acceptation
  script:
    - docker load < alpinehelloworld.tar
    - docker run -d -p 80:5000 -e PORT=5000 --name webapp alpinehelloworld
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep "Hello world!"

release_image:
  stage: release_image
  script:
    - docker load < alpinehelloworld.tar
    - docker tag alpinehelloworld "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag alpinehelloworld "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

deploy_staging:
  stage: deploy_staging
  environment:
    name: staging
  script:
    - apk --no-cache add curl
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - echo "Deploying to AWS ECS Fargate (staging)..."
    - aws ecs run-task \
        --cluster $ECS_CLUSTER \
        --task-definition $ECS_TASK_DEFINITION \
        --launch-type FARGATE \
        --network-configuration "awsvpcConfiguration={subnets=[$ECS_SUBNET_1,$ECS_SUBNET_2],securityGroups=[$ECS_SECURITY_GROUP],assignPublicIp=ENABLED}" \
        --count 1
  only:
    - master

deploy_prod:
  stage: deploy_prod
  environment:
    name: production
  script:
    - apk --no-cache add curl
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - echo "Deploying to AWS ECS Fargate (production)..."
    - aws ecs run-task \
        --cluster $ECS_CLUSTER \
        --task-definition $ECS_TASK_DEFINITION \
        --launch-type FARGATE \
        --network-configuration "awsvpcConfiguration={subnets=[$ECS_SUBNET_1,$ECS_SUBNET_2],securityGroups=[$ECS_SECURITY_GROUP],assignPublicIp=ENABLED}" \
        --count 1
  only:
    - master
