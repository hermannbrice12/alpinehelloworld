variables:
  IMAGE_NAME: "docker.io/tchofo/alpinehelloworld"
  INTERNAL_PORT: 5000
  EXTERNAL_PORT: 80
  AWS_DEFAULT_REGION: "eu-west-3"
  ECS_CLUSTER: "cluster"  # Nom de votre cluster ECS
  ECS_TASK_DEFINITION: "tchofo-taskdefinition"  # Nom de votre task definition
  ECS_SUBNET_1: "subnet-02487a25300c87d1"  # Subnet 1
  ECS_SUBNET_2: "subnet-0f628c757368e1103"  # Subnet 2
  ECS_SECURITY_GROUP: "sg-0ee00e2e73c60c59a"  # Security group

stages:
  - build
  - test_acceptation
  - release_image
  - deploy_aws

# Étape de construction
docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker build -t alpinehelloworld .
    - docker save alpinehelloworld > alpinehelloworld.tar
  artifacts:
    paths:
      - alpinehelloworld.tar

# Étape de test d'acceptation
test_acceptation:
  image: docker:latest
  stage: test_acceptation
  services:
    - docker:dind
  script:
    - docker load < alpinehelloworld.tar
    - docker run -d -p $EXTERNAL_PORT:$INTERNAL_PORT -e PORT=$INTERNAL_PORT --name webapp alpinehelloworld
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep "Hello world!"

# Étape de publication sur DockerHub
release_image:
  image: docker:latest
  stage: release_image
  services:
    - docker:dind
  script:
    - docker load < alpinehelloworld.tar 
    - docker images  
    - docker tag alpinehelloworld "docker.io/$DOCKER_USERNAME/alpinehelloworld:${CI_COMMIT_REF_NAME}"  
    - docker tag alpinehelloworld "docker.io/$DOCKER_USERNAME/alpinehelloworld:${CI_COMMIT_SHORT_SHA}"  
    - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin  
    - docker push "docker.io/$DOCKER_USERNAME/alpinehelloworld:${CI_COMMIT_REF_NAME}" 
    - docker push "docker.io/$DOCKER_USERNAME/alpinehelloworld:${CI_COMMIT_SHORT_SHA}"  
  only:
    - master

# Étape de déploiement sur AWS ECS Fargate
deploy_aws:
  image: amazon/aws-cli:latest
  stage: deploy_aws
  environment:
    name: production
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - echo "Déploiement sur AWS ECS Fargate..."
    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment  # Met à jour le service pour utiliser la nouvelle version de l'image
  only:
    - master
